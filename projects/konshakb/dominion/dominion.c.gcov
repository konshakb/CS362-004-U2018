        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:72
        -:    0:Programs:72
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 28629 returned 100% blocks executed 100%
    28629:    8:int compare(const void* a, const void* b) {
    28629:    9:	if (*(int*)a > *(int*)b)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
     9000:   10:		return 1;
    19629:   11:	if (*(int*)a < *(int*)b)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
     9441:   12:		return -1;
    10188:   13:	return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
function initializeGame called 54 returned 100% blocks executed 88%
       54:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
       54:   44:	SelectStream(1);
call    0 returned 100%
       54:   45:	PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:	//check number of players
       54:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
       54:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
      594:   57:	for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:	{
     5940:   59:		for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:		{
     5400:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
       54:   73:	if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:	{
       54:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
       54:   87:	if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:	{
       54:   89:		state->supplyCount[estate] = 8;
       54:   90:		state->supplyCount[duchy] = 8;
       54:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
       54:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
       54:  102:	state->supplyCount[silver] = 40;
       54:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
     1134:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:	{
     8910:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:		{
     8370:  110:			if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
      540:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:				{
      216:  115:					if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      108:  116:						state->supplyCount[i] = 8; 
        -:  117:					}
    #####:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
      432:  122:					state->supplyCount[i] = 10;
        -:  123:				}
      540:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
     7830:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
      162:  138:	for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:	{
      108:  140:		state->deckCount[i] = 0;
      432:  141:		for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:		{
      324:  143:			state->deck[i][j] = estate;
      324:  144:			state->deckCount[i]++;
        -:  145:		}
      864:  146:		for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:		{
      756:  148:			state->deck[i][j] = copper;
      756:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
      162:  154:	for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:	{
      108:  156:		if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
      162:  163:	for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
      108:  166:		state->handCount[i] = 0;
      108:  167:		state->discardCount[i] = 0;
        -:  168://		draw 5 cards
        -:  169://		 for (j = 0; j < 5; j++)
        -:  170://			{
        -:  171://			  drawCard(i, state);
        -:  172://			}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
     1512:  176:	for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:	{
     1458:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
       54:  182:	state->outpostPlayed = 0;
       54:  183:	state->phase = 0;
       54:  184:	state->numActions = 1;
       54:  185:	state->numBuys = 1;
       54:  186:	state->playedCardCount = 0;
       54:  187:	state->whoseTurn = 0;
       54:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
      324:  192:	for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      270:  193:		drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:	}
        -:  195:
       54:  196:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       54:  198:	return 0;
        -:  199:}
        -:  200:
function shuffle called 108 returned 100% blocks executed 94%
      108:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
      108:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
      108:  209:	if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:		return -1;
      108:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1296:  214:	while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     1080:  215:		card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     1080:  216:		newDeck[newDeckPos] = state->deck[player][card];
     1080:  217:		newDeckPos++;
     3780:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     2700:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
     1080:  221:		state->deckCount[player]--;
        -:  222:	}
     1188:  223:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     1080:  224:		state->deck[player][i] = newDeck[i];
     1080:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
      108:  228:	return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
    #####:  286:	} else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
    #####:  290:	} else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:		if (DEBUG) 
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
    #####:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
    #####:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
    #####:  308:	return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 45 returned 100% blocks executed 100%
       45:  320:int supplyCount(int card, struct gameState *state) {
       45:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
    #####:  326:	int count = 0;
        -:  327:
    #####:  328:	for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:	{
    #####:  330:		if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:	}
        -:  332:
    #####:  333:	for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:	{
    #####:  335:		if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:	{
    #####:  340:		if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:	}
        -:  342:
    #####:  343:	return count;
        -:  344:}
        -:  345:
function whoseTurn called 36 returned 100% blocks executed 100%
       36:  346:int whoseTurn(struct gameState *state) {
       36:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
    #####:  353:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:	//Discard hand
    #####:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
    #####:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
    #####:  363:	if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
    #####:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
    #####:  370:	state->outpostPlayed = 0;
    #####:  371:	state->phase = 0;
    #####:  372:	state->numActions = 1;
    #####:  373:	state->coins = 0;
    #####:  374:	state->numBuys = 1;
    #####:  375:	state->playedCardCount = 0;
    #####:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
    #####:  380:	for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:		drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:	}
        -:  383:
        -:  384:	//Update money
    #####:  385:	updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:	return 0;
        -:  388:}
        -:  389:
function isGameOver called 243 returned 100% blocks executed 100%
      243:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
      243:  395:	if (state->supplyCount[province] == 0)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  396:	{
        9:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
      234:  401:	j = 0;
     6084:  402:	for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:	{
     5850:  404:		if (state->supplyCount[i] == 0)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  405:		{
      243:  406:			j++;
        -:  407:		}
        -:  408:	}
      234:  409:	if ( j >= 3)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  410:	{
        9:  411:		return 1;
        -:  412:	}
        -:  413:
      225:  414:	return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
    #####:  420:	int score = 0;
        -:  421:	//score from hand
    #####:  422:	for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:	{
    #####:  424:		if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:		if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:		if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:		if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:		if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:	}
        -:  431:
        -:  432:	//score from discard
    #####:  433:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:	{
    #####:  435:		if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:		if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:		if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:		if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:		if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:	}
        -:  442:
        -:  443:	//score from deck
    #####:  444:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:	{
    #####:  446:		if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:		if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:		if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:		if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:		if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:	}
        -:  453:
    #####:  454:	return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;	
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:	{
        -:  466:		//set unused player scores to -9999
    #####:  467:		if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:		{
    #####:  469:			players[i] = -9999;
        -:  470:		}
        -:  471:		else
        -:  472:		{
    #####:  473:			players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:		}
        -:  475:	}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:	{
    #####:  481:		if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:		{
    #####:  483:			j = i;
        -:  484:		}
        -:  485:	}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:	{
    #####:  492:		if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:		{
    #####:  494:			players[i]++;
        -:  495:		}
        -:  496:	}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:	{
    #####:  502:		if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:		{
    #####:  504:			j = i;
        -:  505:		}
        -:  506:	}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:	{
    #####:  512:		if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:		{
    #####:  514:			players[i] = 1;
        -:  515:		}
        -:  516:		else
        -:  517:		{
    #####:  518:			players[i] = 0;
        -:  519:		}
        -:  520:	}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
function drawCard called 360 returned 100% blocks executed 38%
      360:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
      360:  528:	if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
    #####:  533:		for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:			state->deck[player][i] = state->discard[player][i];
    #####:  535:			state->discard[player][i] = -1;
        -:  536:		}
        -:  537:
    #####:  538:		state->deckCount[player] = state->discardCount[player];
    #####:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
    #####:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:
    #####:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
    #####:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:
    #####:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:		if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:			return -1;
        -:  561:
    #####:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:		state->deckCount[player]--;
    #####:  564:		state->handCount[player]++;//Increment hand count
        -:  565:	}
        -:  566:
        -:  567:	else{
      360:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
      360:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
      360:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      360:  576:		state->deckCount[player]--;
      360:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
      360:  580:	return 0;
        -:  581:}
        -:  582:
function getCost called 243 returned 100% blocks executed 97%
      243:  583:int getCost(int cardNumber)
        -:  584:{
      243:  585:	switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  586:	{
        -:  587:		case curse:
        9:  588:			return 0;
        -:  589:		case estate:
        9:  590:			return 2;
        -:  591:		case duchy:
        9:  592:			return 5;
        -:  593:		case province:
        9:  594:			return 8;
        -:  595:		case copper:
        9:  596:			return 0;
        -:  597:		case silver:
        9:  598:			return 3;
        -:  599:		case gold:
        9:  600:			return 6;
        -:  601:		case adventurer:
        9:  602:			return 6;
        -:  603:		case council_room:
        9:  604:			return 5;
        -:  605:		case feast:
        9:  606:			return 4;
        -:  607:		case gardens:
        9:  608:			return 4;
        -:  609:		case mine:
        9:  610:			return 5;
        -:  611:		case remodel:
        9:  612:			return 4;
        -:  613:		case smithy:
        9:  614:			return 4;
        -:  615:		case village:
        9:  616:			return 3;
        -:  617:		case baron:
        9:  618:			return 4;
        -:  619:		case great_hall:
        9:  620:			return 3;
        -:  621:		case minion:
        9:  622:			return 5;
        -:  623:		case steward:
        9:  624:			return 3;
        -:  625:		case tribute:
        9:  626:			return 5;
        -:  627:		case ambassador:
        9:  628:			return 3;
        -:  629:		case cutpurse:
        9:  630:			return 4;
        -:  631:		case embargo: 
        9:  632:			return 2;
        -:  633:		case outpost:
        9:  634:			return 5;
        -:  635:		case salvager:
        9:  636:			return 4;
        -:  637:		case sea_hag:
        9:  638:			return 4;
        -:  639:		case treasure_map:
        9:  640:			return 4;
        -:  641:	}
        -:  642:
    #####:  643:	return -1;
        -:  644:}
        -:  645:
function adventuredraw called 9 returned 100% blocks executed 67%
        9:  646:int adventuredraw(int currentPlayer, int drawntreasure, int z, int temphand[], int cardDrawn, struct gameState *state)
        -:  647:{
       27:  648:	while(drawntreasure<2){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        9:  649:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  650:			shuffle(currentPlayer, state);
call    0 never executed
        -:  651:		}
        9:  652:		drawCard(currentPlayer, state);
call    0 returned 100%
        9:  653:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        9:  654:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        9:  655:			drawntreasure=drawntreasure+2;
        -:  656:		else{
    #####:  657:			temphand[z]=cardDrawn;
    #####:  658:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).BUG COMMENTED OUT removing TOP CARD
    #####:  659:			z++;
        -:  660:		}
        -:  661:	}
       18:  662:	while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  663:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  664:		z=z-1;
        -:  665:	}
        9:  666:	return 0;
        -:  667:}
function smithydraw called 9 returned 100% blocks executed 100%
        9:  668:int smithydraw(int currentPlayer, int handPos, struct gameState *state)
        -:  669:{
        -:  670:	int i;
        -:  671:			//+3 Cards
       36:  672:			for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  673:			{
       27:  674:				drawCard(currentPlayer, state);
call    0 returned 100%
        -:  675:			}
        -:  676:			//discard card from hand
        -:  677:		//	discardCard(handPos, currentPlayer, state, 0);
        9:  678:			return 0;
        -:  679:}
        -:  680:
function villagedraw called 9 returned 100% blocks executed 100%
        9:  681:int villagedraw(int currentPlayer, int handPos, struct gameState *state)
        -:  682:{
        -:  683:			//+1 Card
        9:  684:			drawCard(currentPlayer, state);
call    0 returned 100%
        -:  685:
        -:  686:			//+2 Actions
        9:  687:			state->numActions = state->numActions + 3;//bug inserted village draw allows +3 actions instead of 2
        -:  688:
        -:  689:			//discard played card from hand
        9:  690:			discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        9:  691:			return 0;
        -:  692:}
function stewarddraw called 0 returned 0% blocks executed 0%
    #####:  693:int stewarddraw(int choice1, int choice2, int choice3, int currentPlayer, int handPos, struct gameState *state)
        -:  694:{
    #####:  695:			if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  696:			{
        -:  697:				//+2 cards
    #####:  698:				drawCard(currentPlayer, state);
call    0 never executed
    #####:  699:				drawCard(currentPlayer, state);
call    0 never executed
        -:  700:			}
    #####:  701:			else if (choice2 == 2)//bug inserted here--choice1 switched to choice2
branch  0 never executed
branch  1 never executed
        -:  702:			{
        -:  703:				//+2 coins
    #####:  704:				state->coins = state->coins + 2;
        -:  705:			}
        -:  706:			else
        -:  707:			{
        -:  708:				//trash 2 cards in hand
    #####:  709:				discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  710:				discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  711:			}
        -:  712:
        -:  713:			//discard card from hand
    #####:  714:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  715:			return 0;
        -:  716:}
        -:  717:
function councildraw called 9 returned 100% blocks executed 100%
        9:  718:int councildraw(int currentPlayer, int handPos, struct gameState *state)
        -:  719:{
        9:  720:	int i=0;
        -:  721:			//+4 Cards
       45:  722:			for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  723:			{
       36:  724:				drawCard(currentPlayer, state);
call    0 returned 100%
        -:  725:			}
        -:  726:
        -:  727:			//+1 Buy
        9:  728:			state->numBuys++;
        -:  729:
        -:  730:			//Each other player draws a card
       27:  731:			for (i = 0; i < state->numPlayers; i++)//BUG  less than or equal added
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  732:			{
       18:  733:				if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  734:				{
        9:  735:					drawCard(i, state);
call    0 returned 100%
        -:  736:				}
        -:  737:			}
        -:  738:
        -:  739:			//put played card in played card pile
        9:  740:			discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  741:
        9:  742:			return 0;
        -:  743:}
        -:  744:
        -:  745:			//discard card from hand
function cardEffect called 36 returned 100% blocks executed 6%
       36:  746:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  747:{
        -:  748:	int i;
        -:  749:	int j;
        -:  750:	int k;
        -:  751:	int x;
        -:  752:	int index;
       36:  753:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
       36:  754:	int nextPlayer = currentPlayer + 1;
        -:  755:
       36:  756:	int tributeRevealedCards[2] = {-1, -1};
        -:  757:	int temphand[MAX_HAND];// moved above the if statement
       36:  758:	int drawntreasure=0;
       36:  759:	int cardDrawn=0;
       36:  760:	int z = 0;// this is the counter for the temp hand
       36:  761:	if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  762:		nextPlayer = 0;
        -:  763:	}
        -:  764:
       36:  765:	switch( card ) 
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  766:	{
        -:  767:		case adventurer:
        9:  768:			adventuredraw(currentPlayer, drawntreasure, z, temphand, cardDrawn, state);
call    0 returned 100%
        9:  769:			return 0;
        -:  770:
        -:  771:		case council_room:
        9:  772:			councildraw(currentPlayer, handPos, state);
call    0 returned 100%
        9:  773:			return 0;
        -:  774:
        -:  775:		case feast:
        -:  776:			//gain card with cost up to 5
        -:  777:			//Backup hand
    #####:  778:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  779:				temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  780:				state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  781:			}
        -:  782:			//Backup hand
        -:  783:
        -:  784:			//Update Coins for Buy
    #####:  785:			updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  786:			x = 1;//Condition to loop on
    #####:  787:			while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  788:				if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  789:					if (DEBUG)
        -:  790:						printf("None of that card left, sorry!\n");
        -:  791:
        -:  792:					if (DEBUG){
        -:  793:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  794:					}
        -:  795:				}
    #####:  796:				else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:					printf("That card is too expensive!\n");
call    0 never executed
        -:  798:
        -:  799:					if (DEBUG){
        -:  800:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  801:					}
        -:  802:				}
        -:  803:				else{
        -:  804:
        -:  805:					if (DEBUG){
        -:  806:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  807:					}
        -:  808:
    #####:  809:					gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  810:					x = 0;//No more buying cards
        -:  811:
        -:  812:					if (DEBUG){
        -:  813:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:					}
        -:  815:
        -:  816:				}
        -:  817:			}     
        -:  818:
        -:  819:			//Reset Hand
    #####:  820:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  821:				state->hand[currentPlayer][i] = temphand[i];
    #####:  822:				temphand[i] = -1;
        -:  823:			}
        -:  824:			//Reset Hand
        -:  825:
    #####:  826:			return 0;
        -:  827:
        -:  828:		case gardens:
    #####:  829:			return -1;
        -:  830:
        -:  831:		case mine:
    #####:  832:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  835:			{
    #####:  836:				return -1;
        -:  837:			}
        -:  838:
    #####:  839:			if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  840:			{
    #####:  841:				return -1;
        -:  842:			}
        -:  843:
    #####:  844:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:			{
    #####:  846:				return -1;
        -:  847:			}
        -:  848:
    #####:  849:			gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  850:
        -:  851:			//discard card from hand
    #####:  852:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:			//discard trashed card
    #####:  855:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  856:			{
    #####:  857:				if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  858:				{
    #####:  859:					discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  860:					break;
        -:  861:				}
        -:  862:			}
        -:  863:
    #####:  864:			return 0;
        -:  865:
        -:  866:		case remodel:
    #####:  867:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  868:
    #####:  869:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  870:			{
    #####:  871:				return -1;
        -:  872:			}
        -:  873:
    #####:  874:			gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  875:
        -:  876:			//discard card from hand
    #####:  877:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:
        -:  879:			//discard trashed card
    #####:  880:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  881:			{
    #####:  882:				if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  883:				{
    #####:  884:					discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  885:					break;
        -:  886:				}
        -:  887:			}
        -:  888:
        -:  889:
    #####:  890:			return 0;
        -:  891:
        -:  892:		case smithy:
        9:  893:			smithydraw(currentPlayer, handPos, state);
call    0 returned 100%
        9:  894:			return 0;
        -:  895:
        -:  896:		case village:
        9:  897:			villagedraw(currentPlayer, handPos, state);
call    0 returned 100%
        9:  898:			return 0;
        -:  899:
        -:  900:		case baron:
    #####:  901:			state->numBuys++;//Increase buys by 1!
    #####:  902:			if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  903:				int p = 0;//Iterator for hand!
    #####:  904:				int card_not_discarded = 1;//Flag for discard set!
    #####:  905:				while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  906:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  907:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:						state->discardCount[currentPlayer]++;
    #####:  910:						for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  911:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:						}
    #####:  913:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:						state->handCount[currentPlayer]--;
    #####:  915:						card_not_discarded = 0;//Exit the loop
        -:  916:					}
    #####:  917:					else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  918:						if(DEBUG) {
        -:  919:							printf("No estate cards in your hand, invalid choice\n");
        -:  920:							printf("Must gain an estate if there are any\n");
        -:  921:						}
    #####:  922:						if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:							gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  924:							state->supplyCount[estate]--;//Decrement estates
    #####:  925:							if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:								isGameOver(state);
call    0 never executed
        -:  927:							}
        -:  928:						}
    #####:  929:						card_not_discarded = 0;//Exit the loop
        -:  930:					}
        -:  931:
        -:  932:					else{
    #####:  933:						p++;//Next card
        -:  934:					}
        -:  935:				}
        -:  936:			}
        -:  937:
        -:  938:			else{
    #####:  939:				if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  940:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  941:					state->supplyCount[estate]--;//Decrement Estates
    #####:  942:					if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  943:						isGameOver(state);
call    0 never executed
        -:  944:					}
        -:  945:				}
        -:  946:			}
        -:  947:
        -:  948:
    #####:  949:			return 0;
        -:  950:
        -:  951:		case great_hall:
        -:  952:			//+1 Card
    #####:  953:			drawCard(currentPlayer, state);
call    0 never executed
        -:  954:
        -:  955:			//+1 Actions
    #####:  956:			state->numActions++;
        -:  957:
        -:  958:			//discard card from hand
    #####:  959:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  960:			return 0;
        -:  961:
        -:  962:		case minion:
        -:  963:			//+1 action
    #####:  964:			state->numActions++;
        -:  965:
        -:  966:			//discard card from hand
    #####:  967:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  968:
    #####:  969:			if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  970:			{
    #####:  971:				state->coins = state->coins + 2;
        -:  972:			}
        -:  973:
    #####:  974:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  975:			{
        -:  976:				//discard hand
    #####:  977:				while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  978:				{
    #####:  979:					discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  980:				}
        -:  981:
        -:  982:				//draw 4
    #####:  983:				for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  984:				{
    #####:  985:					drawCard(currentPlayer, state);
call    0 never executed
        -:  986:				}
        -:  987:
        -:  988:				//other players discard hand and redraw if hand size > 4
    #####:  989:				for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  990:				{
    #####:  991:					if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  992:					{
    #####:  993:						if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  994:						{
        -:  995:							//discard hand
    #####:  996:							while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  997:							{
    #####:  998:								discardCard(handPos, i, state, 0);
call    0 never executed
        -:  999:							}
        -: 1000:
        -: 1001:							//draw 4
    #####: 1002:							for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1003:							{
    #####: 1004:								drawCard(i, state);
call    0 never executed
        -: 1005:							}
        -: 1006:						}
        -: 1007:					}
        -: 1008:				}
        -: 1009:
        -: 1010:			}
    #####: 1011:			return 0;
        -: 1012:
        -: 1013:		case steward:
    #####: 1014:			stewarddraw(choice1, choice2, choice3, currentPlayer, handPos, state);
call    0 never executed
    #####: 1015:			return 0;
        -: 1016:
        -: 1017:		case tribute:
    #####: 1018:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1019:				if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1020:					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:					state->deckCount[nextPlayer]--;
        -: 1022:				}
    #####: 1023:				else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1024:					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1025:					state->discardCount[nextPlayer]--;
        -: 1026:				}
        -: 1027:				else{
        -: 1028:					//No Card to Reveal
        -: 1029:					if (DEBUG){
        -: 1030:						printf("No cards to reveal\n");
        -: 1031:					}
        -: 1032:				}
        -: 1033:			}
        -: 1034:
        -: 1035:			else{
    #####: 1036:				if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1037:					for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1038:						state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1039:						state->deckCount[nextPlayer]++;
    #####: 1040:						state->discard[nextPlayer][i] = -1;
    #####: 1041:						state->discardCount[nextPlayer]--;
        -: 1042:					}
        -: 1043:
    #####: 1044:					shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1045:				} 
    #####: 1046:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1047:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1048:				state->deckCount[nextPlayer]--;
    #####: 1049:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:				state->deckCount[nextPlayer]--;
        -: 1052:			}    
        -: 1053:
    #####: 1054:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1055:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1056:				state->playedCardCount++;
    #####: 1057:				tributeRevealedCards[1] = -1;
        -: 1058:			}
        -: 1059:
    #####: 1060:			for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1061:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1062:					state->coins += 2;
        -: 1063:				}
        -: 1064:
    #####: 1065:				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1066:					drawCard(currentPlayer, state);
call    0 never executed
    #####: 1067:					drawCard(currentPlayer, state);
call    0 never executed
        -: 1068:				}
        -: 1069:				else{//Action Card
    #####: 1070:					state->numActions = state->numActions + 2;
        -: 1071:				}
        -: 1072:			}
        -: 1073:
    #####: 1074:			return 0;
        -: 1075:
        -: 1076:		case ambassador:
    #####: 1077:			j = 0;		//used to check if player has enough cards to discard
        -: 1078:
    #####: 1079:			if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1080:			{
    #####: 1081:				return -1;				
        -: 1082:			}
        -: 1083:
    #####: 1084:			if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1085:			{
    #####: 1086:				return -1;
        -: 1087:			}
        -: 1088:
    #####: 1089:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1090:			{
    #####: 1091:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1092:				{
    #####: 1093:					j++;
        -: 1094:				}
        -: 1095:			}
    #####: 1096:			if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1097:			{
    #####: 1098:				return -1;				
        -: 1099:			}
        -: 1100:
        -: 1101:			if (DEBUG) 
        -: 1102:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1103:
        -: 1104:			//increase supply count for choosen card by amount being discarded
    #####: 1105:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1106:
        -: 1107:			//each other player gains a copy of revealed card
    #####: 1108:			for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:			{
    #####: 1110:				if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1111:				{
    #####: 1112:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1113:				}
        -: 1114:			}
        -: 1115:
        -: 1116:			//discard played card from hand
    #####: 1117:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1118:
        -: 1119:			//trash copies of cards returned to supply
    #####: 1120:			for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1121:			{
    #####: 1122:				for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1123:				{
    #####: 1124:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1125:					{
    #####: 1126:						discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1127:						break;
        -: 1128:					}
        -: 1129:				}
        -: 1130:			}			
        -: 1131:
    #####: 1132:			return 0;
        -: 1133:
        -: 1134:		case cutpurse:
        -: 1135:
    #####: 1136:			updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1137:			for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1138:			{
    #####: 1139:				if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1140:				{
    #####: 1141:					for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1142:					{
    #####: 1143:						if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1144:						{
    #####: 1145:							discardCard(j, i, state, 0);
call    0 never executed
    #####: 1146:							break;
        -: 1147:						}
    #####: 1148:						if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1149:						{
    #####: 1150:							for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1151:							{
        -: 1152:								if (DEBUG)
        -: 1153:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1154:							}	
    #####: 1155:							break;
        -: 1156:						}		
        -: 1157:					}
        -: 1158:
        -: 1159:				}
        -: 1160:
        -: 1161:			}				
        -: 1162:
        -: 1163:			//discard played card from hand
    #####: 1164:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1165:
    #####: 1166:			return 0;
        -: 1167:
        -: 1168:
        -: 1169:		case embargo: 
        -: 1170:			//+2 Coins
    #####: 1171:			state->coins = state->coins + 2;
        -: 1172:
        -: 1173:			//see if selected pile is in play
    #####: 1174:			if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1175:			{
    #####: 1176:				return -1;
        -: 1177:			}
        -: 1178:
        -: 1179:			//add embargo token to selected supply pile
    #####: 1180:			state->embargoTokens[choice1]++;
        -: 1181:
        -: 1182:			//trash card
    #####: 1183:			discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1184:			return 0;
        -: 1185:
        -: 1186:		case outpost:
        -: 1187:			//set outpost flag
    #####: 1188:			state->outpostPlayed++;
        -: 1189:
        -: 1190:			//discard card
    #####: 1191:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1192:			return 0;
        -: 1193:
        -: 1194:		case salvager:
        -: 1195:			//+1 buy
    #####: 1196:			state->numBuys++;
        -: 1197:
    #####: 1198:			if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1199:			{
        -: 1200:				//gain coins equal to trashed card
    #####: 1201:				state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1202:				//trash card
    #####: 1203:				discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1204:			}
        -: 1205:
        -: 1206:			//discard card
    #####: 1207:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1208:			return 0;
        -: 1209:
        -: 1210:		case sea_hag:
    #####: 1211:			for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1212:				if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1213:					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1214:					state->discardCount[i]++;
    #####: 1215:					state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1216:				}
        -: 1217:			}
    #####: 1218:			return 0;
        -: 1219:
        -: 1220:		case treasure_map:
        -: 1221:			//search hand for another treasure_map
    #####: 1222:			index = -1;
    #####: 1223:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1224:			{
    #####: 1225:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1226:				{
    #####: 1227:					index = i;
    #####: 1228:					break;
        -: 1229:				}
        -: 1230:			}
    #####: 1231:			if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1232:			{
        -: 1233:				//trash both treasure cards
    #####: 1234:				discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1235:				discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1236:
        -: 1237:				//gain 4 Gold cards
    #####: 1238:				for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1239:				{
    #####: 1240:					gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1241:				}
        -: 1242:
        -: 1243:				//return success
    #####: 1244:				return 1;
        -: 1245:			}
        -: 1246:
        -: 1247:			//no second treasure_map found in hand
    #####: 1248:			return -1;
        -: 1249:	}
        -: 1250:
    #####: 1251:	return -1;
        -: 1252:}
        -: 1253:
function discardCard called 18 returned 100% blocks executed 78%
       18: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1255:{
        -: 1256:
        -: 1257:	//if card is not trashed, added to Played pile 
       18: 1258:	if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1259:	{
        -: 1260:		//add card to played pile
       18: 1261:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       18: 1262:		state->playedCardCount++;
        -: 1263:	}
        -: 1264:
        -: 1265:	//set played card to -1
       18: 1266:	state->hand[currentPlayer][handPos] = -1;
        -: 1267:
        -: 1268:	//remove card from player's hand
       18: 1269:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1270:	{
        -: 1271:		//reduce number of cards in hand
    #####: 1272:		state->handCount[currentPlayer]--;
        -: 1273:	}
       18: 1274:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1275:	{
        -: 1276:		//reduce number of cards in hand
    #####: 1277:		state->handCount[currentPlayer]--;
        -: 1278:	}
        -: 1279:	else 	
        -: 1280:	{
        -: 1281:		//replace discarded card with last card in hand
       18: 1282:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:		//set last card to -1
       18: 1284:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:		//reduce number of cards in hand
       18: 1286:		state->handCount[currentPlayer]--;
        -: 1287:	}
        -: 1288:
       18: 1289:	return 0;
        -: 1290:}
        -: 1291:
function gainCard called 45 returned 100% blocks executed 100%
       45: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1293:{
        -: 1294:	//Note: supplyPos is enum of choosen card
        -: 1295:
        -: 1296:	//check if supply pile is empty (0) or card is not used in game (-1)
       45: 1297:	if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
        -: 1298:	{
       18: 1299:		return -1;
        -: 1300:	}
        -: 1301:
        -: 1302:	//added card for [whoseTurn] current player:
        -: 1303:	// toFlag = 0 : add to discard
        -: 1304:	// toFlag = 1 : add to deck
        -: 1305:	// toFlag = 2 : add to hand
        -: 1306:
       27: 1307:	if (toFlag == 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1308:	{
        9: 1309:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        9: 1310:		state->deckCount[player]++;
        -: 1311:	}
       18: 1312:	else if (toFlag == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1313:	{
        9: 1314:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
        9: 1315:		state->handCount[player]++;
        -: 1316:	}
        -: 1317:	else
        -: 1318:	{
        9: 1319:		state->discard[player][ state->discardCount[player] ] = supplyPos;
        9: 1320:		state->discardCount[player]++;
        -: 1321:	}
        -: 1322:
        -: 1323:	//decrease number in supply pile
       27: 1324:	state->supplyCount[supplyPos]--;
        -: 1325:
       27: 1326:	return 0;
        -: 1327:}
        -: 1328:
function updateCoins called 72 returned 100% blocks executed 82%
       72: 1329:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1330:{
        -: 1331:	int i;
        -: 1332:
        -: 1333:	//reset coin count
       72: 1334:	state->coins = 0;
        -: 1335:
        -: 1336:	//add coins for each Treasure card in player's hand
      441: 1337:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1338:	{
      369: 1339:		if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1340:		{
      297: 1341:			state->coins += 1;
        -: 1342:		}
       72: 1343:		else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1344:		{
    #####: 1345:			state->coins += 2;
        -: 1346:		}
       72: 1347:		else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1348:		{
    #####: 1349:			state->coins += 3;
        -: 1350:		}	
        -: 1351:	}	
        -: 1352:
        -: 1353:	//add bonus
       72: 1354:	state->coins += bonus;
        -: 1355:
       72: 1356:	return 0;
        -: 1357:}
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
